/* Placebo v.2.2.0 - http://dmnevius.net/placebo */
(function(context) {
    var version = "2.2.0";
    /**
     * Core Placebo
     *
     * Contains the placebo object and keeps the mess out of the global scope
     */

    /**
     * The internal Placebo object
     * @type {Object}
     */
    var placebo = {
        /**
         * Check if Placebo is running in an environment with a document
         * @return {bool} True if Placebo finds a document.
         */
        "checkEnvironment": function() {
            if (typeof document === "undefined") {
                throw "Placebo requires a document!";
            }
            return true;
        }
    };

    placebo.checkEnvironment();

    placebo.parser = (function() {
        "use strict";

        /*
         * Generated by PEG.js 0.9.0.
         *
         * http://pegjs.org/
         */

        function peg$subclass(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function peg$SyntaxError(message, expected, found, location) {
            this.message = message;
            this.expected = expected;
            this.found = found;
            this.location = location;
            this.name = "SyntaxError";

            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }

        peg$subclass(peg$SyntaxError, Error);

        function peg$parse(input) {
            var options = arguments.length > 1 ? arguments[1] : {},
                parser = this,

                peg$FAILED = {},

                peg$startRuleFunctions = {
                    start: peg$parsestart
                },
                peg$startRuleFunction = peg$parsestart,

                peg$c0 = " ",
                peg$c1 = {
                    type: "literal",
                    value: " ",
                    description: "\" \""
                },
                peg$c2 = ",",
                peg$c3 = {
                    type: "literal",
                    value: ",",
                    description: "\",\""
                },
                peg$c4 = "+",
                peg$c5 = {
                    type: "literal",
                    value: "+",
                    description: "\"+\""
                },
                peg$c6 = "~",
                peg$c7 = {
                    type: "literal",
                    value: "~",
                    description: "\"~\""
                },
                peg$c8 = function(node) {
                    return node
                },
                peg$c9 = function(first, rest) {
                    return [first].concat(rest)
                },
                peg$c10 = /^[a-zA-Z_]/,
                peg$c11 = {
                    type: "class",
                    value: "[a-zA-Z\\_]",
                    description: "[a-zA-Z\\_]"
                },
                peg$c12 = /^[a-zA-Z0-9_\-]/,
                peg$c13 = {
                    type: "class",
                    value: "[a-zA-Z0-9\\_\\-]",
                    description: "[a-zA-Z0-9\\_\\-]"
                },
                peg$c14 = "-",
                peg$c15 = {
                    type: "literal",
                    value: "-",
                    description: "\"-\""
                },
                peg$c16 = function(hyphen, first, rest) {
                    return hyphen || "" + first + rest.join("")
                },
                peg$c17 = function(name) {
                    return name.join("")
                },
                peg$c18 = "*",
                peg$c19 = {
                    type: "literal",
                    value: "*",
                    description: "\"*\""
                },
                peg$c20 = function(name) {
                    return name
                },
                peg$c21 = /^[^)\]]/,
                peg$c22 = {
                    type: "class",
                    value: "[^\\)\\]]",
                    description: "[^\\)\\]]"
                },
                peg$c23 = function(text) {
                    return text.join("")
                },
                peg$c24 = function(node, extra) {
                    return {
                        node: node || "div",
                        extra: extra
                    }
                },
                peg$c25 = function(node, extra) {
                    return {
                        node: node,
                        extra: extra
                    }
                },
                peg$c26 = ".",
                peg$c27 = {
                    type: "literal",
                    value: ".",
                    description: "\".\""
                },
                peg$c28 = function(name) {
                    return {
                        "name": "class",
                        "value": name
                    }
                },
                peg$c29 = "#",
                peg$c30 = {
                    type: "literal",
                    value: "#",
                    description: "\"#\""
                },
                peg$c31 = function(name) {
                    return {
                        "name": "id",
                        "value": name
                    }
                },
                peg$c32 = function(child) {
                    return {
                        "name": "child",
                        "value": child
                    }
                },
                peg$c33 = ">",
                peg$c34 = {
                    type: "literal",
                    value: ">",
                    description: "\">\""
                },
                peg$c35 = "[",
                peg$c36 = {
                    type: "literal",
                    value: "[",
                    description: "\"[\""
                },
                peg$c37 = "]",
                peg$c38 = {
                    type: "literal",
                    value: "]",
                    description: "\"]\""
                },
                peg$c39 = function(name) {
                    return {
                        "name": "attribute",
                        "value": [name, ""]
                    }
                },
                peg$c40 = "|",
                peg$c41 = {
                    type: "literal",
                    value: "|",
                    description: "\"|\""
                },
                peg$c42 = "^",
                peg$c43 = {
                    type: "literal",
                    value: "^",
                    description: "\"^\""
                },
                peg$c44 = "$",
                peg$c45 = {
                    type: "literal",
                    value: "$",
                    description: "\"$\""
                },
                peg$c46 = "=",
                peg$c47 = {
                    type: "literal",
                    value: "=",
                    description: "\"=\""
                },
                peg$c48 = function(name, value) {
                    return {
                        "name": "attribute",
                        "value": [name, value || ""]
                    }
                },
                peg$c49 = ":",
                peg$c50 = {
                    type: "literal",
                    value: ":",
                    description: "\":\""
                },
                peg$c51 = function(name) {
                    return {
                        "name": "pseudo",
                        "value": [name, null]
                    }
                },
                peg$c52 = "(",
                peg$c53 = {
                    type: "literal",
                    value: "(",
                    description: "\"(\""
                },
                peg$c54 = ")",
                peg$c55 = {
                    type: "literal",
                    value: ")",
                    description: "\")\""
                },
                peg$c56 = function(name, value) {
                    return {
                        "name": "pseudo",
                        "value": [name, value]
                    }
                },

                peg$currPos = 0,
                peg$savedPos = 0,
                peg$posDetailsCache = [{
                    line: 1,
                    column: 1,
                    seenCR: false
                }],
                peg$maxFailPos = 0,
                peg$maxFailExpected = [],
                peg$silentFails = 0,

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description) {
                throw peg$buildException(
                    null, [{
                        type: "other",
                        description: description
                    }],
                    input.substring(peg$savedPos, peg$currPos),
                    peg$computeLocation(peg$savedPos, peg$currPos)
                );
            }

            function error(message) {
                throw peg$buildException(
                    message,
                    null,
                    input.substring(peg$savedPos, peg$currPos),
                    peg$computeLocation(peg$savedPos, peg$currPos)
                );
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos],
                    p, ch;

                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line: details.line,
                        column: details.column,
                        seenCR: details.seenCR
                    };

                    while (p < pos) {
                        ch = input.charAt(p);
                        if (ch === "\n") {
                            if (!details.seenCR) {
                                details.line++;
                            }
                            details.column = 1;
                            details.seenCR = false;
                        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                            details.line++;
                            details.column = 1;
                            details.seenCR = true;
                        } else {
                            details.column++;
                            details.seenCR = false;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos),
                    endPosDetails = peg$computePosDetails(endPos);

                return {
                    start: {
                        offset: startPos,
                        line: startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line: endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) {
                    return;
                }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildException(message, expected, found, location) {
                function cleanupExpected(expected) {
                    var i = 1;

                    expected.sort(function(a, b) {
                        if (a.description < b.description) {
                            return -1;
                        } else if (a.description > b.description) {
                            return 1;
                        } else {
                            return 0;
                        }
                    });

                    while (i < expected.length) {
                        if (expected[i - 1] === expected[i]) {
                            expected.splice(i, 1);
                        } else {
                            i++;
                        }
                    }
                }

                function buildMessage(expected, found) {
                    function stringEscape(s) {
                        function hex(ch) {
                            return ch.charCodeAt(0).toString(16).toUpperCase();
                        }

                        return s
                            .replace(/\\/g, '\\\\')
                            .replace(/"/g, '\\"')
                            .replace(/\x08/g, '\\b')
                            .replace(/\t/g, '\\t')
                            .replace(/\n/g, '\\n')
                            .replace(/\f/g, '\\f')
                            .replace(/\r/g, '\\r')
                            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) {
                                return '\\x0' + hex(ch);
                            })
                            .replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) {
                                return '\\x' + hex(ch);
                            })
                            .replace(/[\u0100-\u0FFF]/g, function(ch) {
                                return '\\u0' + hex(ch);
                            })
                            .replace(/[\u1000-\uFFFF]/g, function(ch) {
                                return '\\u' + hex(ch);
                            });
                    }

                    var expectedDescs = new Array(expected.length),
                        expectedDesc, foundDesc, i;

                    for (i = 0; i < expected.length; i++) {
                        expectedDescs[i] = expected[i].description;
                    }

                    expectedDesc = expected.length > 1 ?
                        expectedDescs.slice(0, -1).join(", ") +
                        " or " +
                        expectedDescs[expected.length - 1] :
                        expectedDescs[0];

                    foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                    return "Expected " + expectedDesc + " but " + foundDesc + " found.";
                }

                if (expected !== null) {
                    cleanupExpected(expected);
                }

                return new peg$SyntaxError(
                    message !== null ? message : buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parsestart() {
                var s0;

                s0 = peg$parsesiblings();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsenode();
                }

                return s0;
            }

            function peg$parsesibling() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 32) {
                    s1 = peg$c0;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c1);
                    }
                }
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s2 = peg$c2;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 43) {
                            s2 = peg$c4;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c5);
                            }
                        }
                        if (s2 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 126) {
                                s2 = peg$c6;
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c7);
                                }
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 32) {
                            s3 = peg$c0;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c1);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsenodeRequired();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c8(s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsesiblings() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsenodeRequired();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 32) {
                        s2 = peg$c0;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c1);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsesibling();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsesibling();
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c9(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsenmstart() {
                var s0;

                if (peg$c10.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c11);
                    }
                }

                return s0;
            }

            function peg$parsenmchar() {
                var s0;

                if (peg$c12.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c13);
                    }
                }

                return s0;
            }

            function peg$parseident() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = peg$c14;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c15);
                    }
                }
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsenmstart();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parsenmchar();
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsenmchar();
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c16(s1, s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsename() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsenmchar();
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsenmchar();
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c17(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseelement() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseident();
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                        s1 = peg$c18;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c19);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsetext() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c21.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c22);
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c21.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c22);
                            }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 32) {
                        s2 = peg$c0;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c1);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c23(s1);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsenode() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseelement();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseextra();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseextra();
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c24(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsenodeRequired() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseelement();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseextra();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseextra();
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c25(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseextra() {
                var s0;

                s0 = peg$parseclass();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseid();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsechildren();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseinside();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseattributeIs();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseattribute();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parsepseudoSpecial();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parsepseudo();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseclass() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                    s1 = peg$c26;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c27);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseident();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c28(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseid() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 35) {
                    s1 = peg$c29;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c30);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsename();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c31(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseinside() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 32) {
                    s1 = peg$c0;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c1);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsesiblings();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parsenodeRequired();
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c32(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsechildren() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 32) {
                    s1 = peg$c0;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c1);
                    }
                }
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                        s2 = peg$c33;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c34);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 32) {
                            s3 = peg$c0;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c1);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsesiblings();
                            if (s4 === peg$FAILED) {
                                s4 = peg$parsenodeRequired();
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c32(s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseattribute() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c35;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c36);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsetext();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s3 = peg$c37;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c38);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c39(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseattributeIs() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c35;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c36);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseident();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 126) {
                            s3 = peg$c6;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c7);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 124) {
                                s3 = peg$c40;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c41);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 94) {
                                    s3 = peg$c42;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c43);
                                    }
                                }
                                if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 36) {
                                        s3 = peg$c44;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c45);
                                        }
                                    }
                                    if (s3 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 42) {
                                            s3 = peg$c18;
                                            peg$currPos++;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c19);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 61) {
                                s4 = peg$c46;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c47);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsetext();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s6 = peg$c37;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c38);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c48(s2, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsepseudo() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 58) {
                    s1 = peg$c49;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c50);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s2 = peg$c49;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c50);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseident();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c51(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsepseudoSpecial() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 58) {
                    s1 = peg$c49;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c50);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s2 = peg$c49;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c50);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseident();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s4 = peg$c52;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c53);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsetext();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c54;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c55);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c56(s3, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail({
                        type: "end",
                        description: "end of input"
                    });
                }

                throw peg$buildException(
                    null,
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length ?
                    peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) :
                    peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            SyntaxError: peg$SyntaxError,
            parse: peg$parse
        };
    })();

    /**
     * Builder
     *
     * Builds elements from objects created by parser.js
     */

    placebo.builder = {
        /**
         * Builds DOM elements from placebo.parser objects
         * @param  {Object} parsed The output of placebo.parser to build
         * @return {Array}         An array of DOM elements matching the placebo.parser output
         */
        "build": function(parsed, done) {
            placebo.builder.pseudoSelectorsQueue = [];
            var a,
                parent = document.createElement("div"),
                target,
                i;
            if (!parsed.length) {
                parsed = [parsed];
            }
            for (i = 0; i < parsed.length; i += 1) {
                if (parsed[i].node === "*") {
                    parsed[i].node = "div";
                }
                target = document.createElement(parsed[i].node);
                for (a = 0; a < parsed[i].extra.length; a += 1) {
                    this.rules[parsed[i].extra[a].name](target, parsed[i].extra[a].value);
                }
                parent.appendChild(target);
            }
            if (typeof done === "function") {
                done();
            }
            return parent;
        },
        "rules": {
            "attribute": function(e, v) {
                e.setAttribute(v[0], v[1]);
            },
            "child": function(e, v) {
                var children = Array.prototype.slice.call(placebo.builder.build(v).children),
                    i;
                for (i = 0; i < children.length; i += 1) {
                    e.appendChild(children[i]);
                }
            },
            "class": function(e, v) {
                e.className += " " + v;
                e.className = e.className.replace(/^\s/, "");
            },
            "id": function(e, v) {
                e.id += " " + v;
                e.id = e.id.replace(/^\s/, "");
            },
            "pseudo": function(e, v) {
                if (placebo.builder.pseudoSelectors[v[0]]) {
                    placebo.builder.pseudoSelectorsQueue.push([v[0], e, v[1]]);
                }
            }
        }
    };

    placebo.builder.pseudoSelectors = {};
    placebo.builder.pseudoSelectorsQueue = [];
    placebo.builder.pseudoSelectorsDone = [];

    /**
     * Interface
     *
     * Provides a global method of accessing Placebo
     */

    /**
     * Helpful methods and storage information for generated elements
     * @param  {Array} elements  An array of elements created by placebo.builder
     * @return {Object}          An object with methods for interacting with the elements
     */
    placebo.interface = function(root) {
        /**
         * A collection of methods for interacting with the elements
         * @type {Object}
         */
        var _interface = {
            "root": root,
            "elements": Array.prototype.slice.call(root.children),
            /**
             * Get the HTML as text of the elements
             * @return {String} The HTML representation of the elements
             */
            "html": function() {
                var container = document.createElement("div"),
                    i;
                for (i = 0; i < this.elements.length; i += 1) {
                    container.appendChild(this.elements[i]);
                }
                return container.innerHTML;
            },
            "place": function(parent) {
                var i;
                for (i = 0; i < this.elements.length; i += 1) {
                    parent.appendChild(this.elements[i]);
                }
                return parent;
            }
        };
        return _interface;
    };

    /**
     * Public access point for Placebo
     * @param  {String} selector The CSS selector to evaluate
     * @return {Object}          A placebo.interface object
     */
    placebo.main = function(selector) {
        return placebo.interface(placebo.builder.build(placebo.parser.parse(selector), function() {
            var i;
            for (i = 0; i < placebo.builder.pseudoSelectorsQueue.length; i += 1) {
                var selector = placebo.builder.pseudoSelectorsQueue[i];
                placebo.builder.pseudoSelectors[selector[0]](selector[1], selector[2]);
            }
            for (i = 0; i < placebo.builder.pseudoSelectorsDone.length; i += 1) {
                placebo.builder.pseudoSelectorsDone[i]();
            }
        }));
    };

    /**
     * API
     *
     * API for creating ::pseudo plugins
     */

    /**
     * Adds a new pseudo selector
     * @param  {String}   selector The ::pseudo selector to search for
     * @param  {Function} callback A function that takes two arguments, the first being the element and the second being the user
     *                            supplied value, that is called when the selector is applied
     * @param  {Boolean} done      If true, the callback function will not be applied until all other pseudo selectors have
     *                            been applied
     * @return {Function}          The callback function
     */
    placebo.main.addPseudoBehavior = function(selector, callback) {
        placebo.builder.pseudoSelectors[selector] = callback;
        return callback;
    };

    /**
     * Adds a selector-unrelated function to be run when all selectors have been applied
     * @param  {Function} callback The function to run
     * @return {Function}          The callback function
     */
    placebo.main.onPseudoDone = function(callback) {
        placebo.builder.pseudoSelectorsDone.push(callback);
        return callback;
    };

    /**
     * Injects plugins into the main Placebo object in AMD environments
     * @param  {Function} plugin The plugin returned by your AMD loader
     * @return {Function}        The plugin
     */
    placebo.main.plugin = function(plugin) {
        plugin(placebo.main);
        return plugin;
    };

    /**
     * Globally visible version number, for identifying if the global Placebo is in fact the one you want
     * @type {String}
     */
    placebo.main.version = version;

    /**
     * Integration for various environments
     */

    if (typeof module !== "undefined" && module.exports) {
        module.exports = placebo.main;
    } else if (typeof define === "function" && define.amd) {
        define(function() {
            return placebo.main;
        });
    } else {
        context.placebo = placebo.main;
    }

    /**
     * Text plugin for Placebo
     * Powerful selectors for adding text to elements
     *
     * Includes ::after, ::before, ::first-letter, ::lang, :text
     */

    (function(context) {

        /**
         * Contains three arrays of texts to be inserted at their respective positions
         * @type {Object}
         */
        var texts = {
                "before": [],
                "middle": [],
                "after": []
            },
            /**
             * Adds text to be appended to the end of the element's text
             * @param  {Object} e The target element
             * @param  {String} v The text to append
             * @return {Object}   The modified element
             */
            after = function(e, v) {
                texts.after.push([e, v]);
                return e;
            },
            /**
             * Applies the texts stored in the "texts" object in the correct order
             * @return {Object} The texts object
             */
            applyTexts = function() {
                var i;
                for (i = 0; i < texts.before.length; i += 1) {
                    texts.before[i][0].innerText += texts.before[i][1];
                }
                for (i = 0; i < texts.middle.length; i += 1) {
                    texts.middle[i][0].innerText += texts.middle[i][1];
                }
                for (i = 0; i < texts.after.length; i += 1) {
                    texts.after[i][0].innerText += texts.after[i][1];
                }
                texts.before = [];
                texts.middle = [];
                texts.after = [];
                return texts;
            },
            /**
             * Adds text to be appened to the beginning of the element's text
             * @param  {Object} e The target element
             * @param  {String} v The text to append
             * @return {Object}   The modified element
             */
            before = function(e, v) {
                texts.before.push([e, v]);
                return e;
            },
            /**
             * Sets the first letter of the element's text
             * @param  {Object} e The target element
             * @param  {String} v The text to replace
             * @return {Object}   The modified element
             */
            firstLetter = function(e, v) {
                e.innerText = v[0] + e.innerText.substr(1);
                return e;
            },
            /**
             * Sets the language of the element
             * @param  {Object} e The target element
             * @param  {String} v The language code
             * @return {Object}   The modified element
             */
            lang = function(e, v) {
                e.lang = v;
                return e;
            },
            /**
             * Adds text to be appened to the middle of the element's text
             * @param  {Object} e The target element
             * @param  {String} v The text to append
             * @return {Object}   The modified element
             */
            text = function(e, v) {
                texts.middle.push([e, v]);
                return e;
            },
            /**
             * Registers the pseudo selectors in any environment
             * @param  {Object} placebo The placebo object
             * @return {Object}         The placebo object
             */
            register = function(placebo) {
                placebo.addPseudoBehavior("after", after);
                placebo.addPseudoBehavior("before", before);
                placebo.addPseudoBehavior("first-letter", firstLetter, true);
                placebo.addPseudoBehavior("lang", lang);
                placebo.addPseudoBehavior("text", text);
                placebo.onPseudoDone(applyTexts);
                return placebo;
            };

        if (typeof module !== "undefined" && module.exports) {
            module.exports = register;
        } else if (typeof define === "function" && define.amd) {
            define(function() {
                return register;
            });
        } else if (typeof placebo === "function" && typeof placebo.version === "string") {
            placebo.plugin(register);
        } else if (typeof context.placebo === "function" && typeof context.placebo.version === "string") {
            context.placebo.plugin(register);
        } else {
            throw "Text.js requires Placebo!";
        }

    }(this));

    /**
     * Input plugin for placebo
     * A collection of selectors for <input> elements
     *
     * Includes :checked, :disabled, :enabled, :in-range, :optional, :out-of-range, :read-only, :read-write
     */

    (function(context) {

        /**
         * Checks a checkbox
         * @param  {Object} e The target element
         * @return {Object}   The modified element
         */
        var checked = function(e) {
                e.checked = true;
                e.setAttribute("checked", "");
                return e;
            },
            /**
             * Disables any input
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            disabled = function(e) {
                e.disabled = true;
                e.setAttribute("disabled", "");
                return e;
            },
            /**
             * Enables any input
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            enabled = function(e) {
                e.disabled = false;
                e.removeAttribute("disabled");
                return e;
            },
            /**
             * Seeds the input with a random number within its valid range
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            inRange = function(e) {
                var min = 0,
                    max = 100,
                    value;
                if (e.min) {
                    min = Number(e.min);
                }
                if (e.max) {
                    max = Number(e.max);
                }
                value = Math.floor(Math.random() * (max - min + 1) + min);
                e.value = value;
                e.setAttribute("value", value);
                return e;
            },
            /**
             * Sets the input as optional
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            optional = function(e) {
                e.required = false;
                e.removeAttribute("required");
                return e;
            },
            /**
             * Seeds the input with a random number outside of its specified range
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            outOfRange = function(e) {
                var min = 0,
                    max = 100,
                    value;
                if (e.min) {
                    min = Number(e.min);
                }
                if (e.max) {
                    max = Number(e.max);
                }
                if ((Math.floor(Math.random() * (max - min - 1)) + min) % 2 === 0) {
                    value = Math.floor(Math.random() * ((min * -1) - min - 1) + (min * -1));
                } else {
                    value = Math.floor(Math.random() * ((max * 2) - max - 1) + (max * 2));
                }
                e.value = value;
                e.setAttribute("value", value);
                return e;
            },
            /**
             * Set the element as read-only
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            readOnly = function(e) {
                e.readonly = true;
                e.setAttribute("read-only", "");
                return e;
            },
            /**
             * Set the element as read-write
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            readWrite = function(e) {
                e.readonly = false;
                e.removeAttribute("read-only");
                return e;
            },
            /**
             * Set the input as required
             * @param  {Object} e The target element
             * @return {Object}   The modified element
             */
            required = function(e) {
                e.required = true;
                e.setAttribute("required", "");
                return e;
            },
            /**
             * Registers the pseudo selectors in any environment
             * @param  {Object} placebo The placebo object
             * @return {Object}         The placebo object
             */
            register = function(placebo) {
                placebo.addPseudoBehavior("checked", checked);
                placebo.addPseudoBehavior("disabled", disabled);
                placebo.addPseudoBehavior("enabled", enabled);
                placebo.addPseudoBehavior("in-range", inRange);
                placebo.addPseudoBehavior("optional", optional);
                placebo.addPseudoBehavior("out-of-range", outOfRange);
                placebo.addPseudoBehavior("read-only", readOnly);
                placebo.addPseudoBehavior("read-write", readWrite);
                placebo.addPseudoBehavior("required", required);
                return placebo;
            };

        if (typeof module !== "undefined" && module.exports) {
            module.exports = register;
        } else if (typeof define === "function" && define.amd) {
            define(function() {
                return register;
            });
        } else if (typeof placebo === "function" && typeof placebo.version === "string") {
            placebo.plugin(register);
        } else if (typeof context.placebo === "function" && typeof context.placebo.version === "string") {
            context.placebo.plugin(register);
        } else {
            throw "Input.js requires Placebo!";
        }

    }(this));

    /**
     * Family plugin for Placebo
     * Large assortment of tools for modifying element's position in the DOM
     *
     * Includes :empty, :first-of-type, :last-child, :last-of-type, :nth-child(n), :nth-last-child(n), :nth-last-of-type(n),
     * 					:nth-of-type(n), :only-of-type, :only-child
     */

    (function(context) {

        /**
         * Removes all children from the element
         * @param  {Object} e The target element
         * @return {Object}   The element
         */
        var empty = function(e) {
                var i;
                if (e.children.length > 0) {
                    for (i = 0; i < e.children.length; i += 1) {
                        e.children[i].parentNode.removeChild(e.children[i]);
                    }
                }
                return e;
            },
            /**
             * Inserts the element as the first of its node type
             * @param  {Object} e The target element
             * @return {Object}   The element
             */
            firstOfType = function(e) {
                var parent = e.parentNode,
                    ofType = parent.getElementsByTagName(e.nodeName);
                parent.removeChild(e);
                parent.insertBefore(e, ofType[0]);
                return e;
            },
            /**
             * Insert the element as the last child of its parent
             * @param  {Object} e The target element
             * @return {Object}   The element
             */
            lastChild = function(e) {
                var parent = e.parentNode;
                parent.removeChild(e);
                parent.appendChild(e);
                return e;
            },
            /**
             * Insert the element as the last of its type
             * @param  {Object} e The target element
             * @return {Object}   The element
             */
            lastOfType = function(e) {
                var parent = e.parentNode,
                    ofType = parent.getElementsByTagName(e.nodeName);
                parent.removeChild(e);
                parent.insertBefore(e, ofType[ofType.length - 1].nextSibling);
                return e;
            },
            /**
             * Insert the element as the nth child of its parent
             * @param  {Object} e The target element
             * @param  {String} v "n"
             * @return {Object}   The element
             */
            nthChild = function(e, v) {
                var parent = e.parentNode;
                parent.removeChild(e);
                if (parent.children[Number(v) - 1]) {
                    parent.insertBefore(e, parent.children[Number(v) - 1]);
                } else {
                    parent.appendChild(e);
                }
                return e;
            },
            /**
             * Insert the element as the child nth from the last child of its parent
             * @param  {Object} e The target element
             * @param  {String} v "n"
             * @return {Object}   The element
             */
            nthLastChild = function(e, v) {
                var parent = e.parentNode;
                parent.removeChild(e);
                if (parent.children[parent.children.length - Number(v) + 1]) {
                    parent.insertBefore(e, parent.children[parent.children.length - Number(v) + 1]);
                } else {
                    parent.insertBefore(e, parent.children[parent.children.length]);
                }
                return e;
            },
            /**
             * Insert the element as the child nth from the last child of the same type of its parent
             * @param  {Object} e The target element
             * @param  {String} v "n"
             * @return {Object}   The element
             */
            nthLastOfType = function(e, v) {
                var parent = e.parentNode,
                    ofType = parent.getElementsByTagName(e.nodeName);
                parent.removeChild(e);
                if (ofType[ofType.length - Number(v) + 1]) {
                    parent.insertBefore(e, ofType[ofType.length - Number(v) + 1]);
                } else {
                    parent.appendChild(e);
                }
                return e;
            },
            /**
             * Insert the element as the ntn child of its type
             * @param  {Object} e The target element
             * @param  {String} v "n"
             * @return {Object}   The element
             */
            nthOfType = function(e, v) {
                var parent = e.parentNode,
                    ofType = parent.getElementsByTagName(e.nodeName);
                parent.removeChild(e);
                if (ofType[Number(v) - 1]) {
                    parent.insertBefore(e, ofType[Number(v) - 1]);
                } else {
                    parent.insertBefore(e, ofType[ofType.length - 1].nextSibling);
                }
                return e;
            },
            /**
             * Removes all elements of the same type
             * @param  {Object} e The target element
             * @return {Object}   The target element
             */
            onlyOfType = function(e) {
                var parent = e.parentNode,
                    ofType = parent.getElementsByTagName(e.nodeName),
                    next = e.nextSibling,
                    i;
                while (ofType.length > 0) {
                    parent.removeChild(ofType[0]);
                }
                parent.insertBefore(e, next);
                return e;
            },
            /**
             * Removes all children except the target element
             * @param  {Object} e The target element
             * @return {Object}   The target element
             */
            onlyChild = function(e) {
                var parent = e.parentNode;
                while (parent.children.length > 0) {
                    parent.removeChild(parent.children[0]);
                }
                parent.appendChild(e);
                return e;
            },
            /**
             * Registers the pseudo selectors in any environment
             * @param  {Object} placebo The placebo object
             * @return {Object}         The placebo object
             */
            register = function(placebo) {
                placebo.addPseudoBehavior("empty", empty, true);
                placebo.addPseudoBehavior("first-of-type", firstOfType, true);
                placebo.addPseudoBehavior("last-child", lastChild, true);
                placebo.addPseudoBehavior("last-of-type", lastOfType, true);
                placebo.addPseudoBehavior("nth-child", nthChild, true);
                placebo.addPseudoBehavior("nth-last-child", nthLastChild, true);
                placebo.addPseudoBehavior("nth-last-of-type", nthLastOfType, true);
                placebo.addPseudoBehavior("nth-of-type", nthOfType, true);
                placebo.addPseudoBehavior("only-of-type", onlyOfType, true);
                placebo.addPseudoBehavior("only-child", onlyChild, true);
                return placebo;
            };

        if (typeof module !== "undefined" && module.exports) {
            module.exports = register;
        } else if (typeof define === "function" && define.amd) {
            define(function() {
                return register;
            });
        } else if (typeof placebo === "function" && typeof placebo.version === "string") {
            placebo.plugin(register);
        } else if (typeof context.placebo === "function" && typeof context.placebo.version === "string") {
            context.placebo.plugin(register);
        } else {
            throw "Family.js requires Placebo!";
        }

    }(this));
}(this));

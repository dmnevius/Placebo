(function (context) {
    'use strict';
    var parser = (function() {
      "use strict";

      /*
       * Generated by PEG.js 0.9.0.
       *
       * http://pegjs.org/
       */

      function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }

      function peg$SyntaxError(message, expected, found, location) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.location = location;
        this.name     = "SyntaxError";

        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }

      peg$subclass(peg$SyntaxError, Error);

      function peg$parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
            parser  = this,

            peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart },
            peg$startRuleFunction  = peg$parsestart,

            peg$c0 = function(e, extra) {return {"node":e.join("")||"div","extra":extra}},
            peg$c1 = /^[^.#,>+~[\]|=\^$*:)(s]/,
            peg$c2 = { type: "class", value: "[^\\.\\#\\,\\>\\+\\~\\[\\]\\|\\=\\^\\$\\*\\:\\)\\(\\s]", description: "[^\\.\\#\\,\\>\\+\\~\\[\\]\\|\\=\\^\\$\\*\\:\\)\\(\\s]" },
            peg$c3 = "*",
            peg$c4 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c5 = function(node) {return node},
            peg$c6 = ":",
            peg$c7 = { type: "literal", value: ":", description: "\":\"" },
            peg$c8 = "active",
            peg$c9 = { type: "literal", value: "active", description: "\"active\"" },
            peg$c10 = "after",
            peg$c11 = { type: "literal", value: "after", description: "\"after\"" },
            peg$c12 = "before",
            peg$c13 = { type: "literal", value: "before", description: "\"before\"" },
            peg$c14 = "checked",
            peg$c15 = { type: "literal", value: "checked", description: "\"checked\"" },
            peg$c16 = "disabled",
            peg$c17 = { type: "literal", value: "disabled", description: "\"disabled\"" },
            peg$c18 = "empty",
            peg$c19 = { type: "literal", value: "empty", description: "\"empty\"" },
            peg$c20 = "enabled",
            peg$c21 = { type: "literal", value: "enabled", description: "\"enabled\"" },
            peg$c22 = "first-child",
            peg$c23 = { type: "literal", value: "first-child", description: "\"first-child\"" },
            peg$c24 = "first-letter",
            peg$c25 = { type: "literal", value: "first-letter", description: "\"first-letter\"" },
            peg$c26 = "first-line",
            peg$c27 = { type: "literal", value: "first-line", description: "\"first-line\"" },
            peg$c28 = "first-of-type",
            peg$c29 = { type: "literal", value: "first-of-type", description: "\"first-of-type\"" },
            peg$c30 = "focus",
            peg$c31 = { type: "literal", value: "focus", description: "\"focus\"" },
            peg$c32 = "hover",
            peg$c33 = { type: "literal", value: "hover", description: "\"hover\"" },
            peg$c34 = "in-range",
            peg$c35 = { type: "literal", value: "in-range", description: "\"in-range\"" },
            peg$c36 = "invalid",
            peg$c37 = { type: "literal", value: "invalid", description: "\"invalid\"" },
            peg$c38 = "last-child",
            peg$c39 = { type: "literal", value: "last-child", description: "\"last-child\"" },
            peg$c40 = "last-of-type",
            peg$c41 = { type: "literal", value: "last-of-type", description: "\"last-of-type\"" },
            peg$c42 = "link",
            peg$c43 = { type: "literal", value: "link", description: "\"link\"" },
            peg$c44 = "only-of-type",
            peg$c45 = { type: "literal", value: "only-of-type", description: "\"only-of-type\"" },
            peg$c46 = "only-child",
            peg$c47 = { type: "literal", value: "only-child", description: "\"only-child\"" },
            peg$c48 = "optional",
            peg$c49 = { type: "literal", value: "optional", description: "\"optional\"" },
            peg$c50 = "out-of-range",
            peg$c51 = { type: "literal", value: "out-of-range", description: "\"out-of-range\"" },
            peg$c52 = "read-only",
            peg$c53 = { type: "literal", value: "read-only", description: "\"read-only\"" },
            peg$c54 = "read-write",
            peg$c55 = { type: "literal", value: "read-write", description: "\"read-write\"" },
            peg$c56 = "required",
            peg$c57 = { type: "literal", value: "required", description: "\"required\"" },
            peg$c58 = "root",
            peg$c59 = { type: "literal", value: "root", description: "\"root\"" },
            peg$c60 = "selection",
            peg$c61 = { type: "literal", value: "selection", description: "\"selection\"" },
            peg$c62 = "target",
            peg$c63 = { type: "literal", value: "target", description: "\"target\"" },
            peg$c64 = "valid",
            peg$c65 = { type: "literal", value: "valid", description: "\"valid\"" },
            peg$c66 = "visited",
            peg$c67 = { type: "literal", value: "visited", description: "\"visited\"" },
            peg$c68 = function(p, extra) {var a={};a.pseudo=p;a.extra=extra||{};return a},
            peg$c69 = "lang",
            peg$c70 = { type: "literal", value: "lang", description: "\"lang\"" },
            peg$c71 = "nth-child",
            peg$c72 = { type: "literal", value: "nth-child", description: "\"nth-child\"" },
            peg$c73 = "nth-last-child",
            peg$c74 = { type: "literal", value: "nth-last-child", description: "\"nth-last-child\"" },
            peg$c75 = "nth-last-of-type",
            peg$c76 = { type: "literal", value: "nth-last-of-type", description: "\"nth-last-of-type\"" },
            peg$c77 = "nth-of-type",
            peg$c78 = { type: "literal", value: "nth-of-type", description: "\"nth-of-type\"" },
            peg$c79 = "text",
            peg$c80 = { type: "literal", value: "text", description: "\"text\"" },
            peg$c81 = "(",
            peg$c82 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c83 = /^[0-9]/,
            peg$c84 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c85 = ")",
            peg$c86 = { type: "literal", value: ")", description: "\")\"" },
            peg$c87 = function(p, v, extra) {var a={};a.pseudo=p;a.value=v.join("");a.extra=extra||{};return a},
            peg$c88 = "not",
            peg$c89 = { type: "literal", value: "not", description: "\"not\"" },
            peg$c90 = function(p, e, v, extra) {var a={};a.pseudo=p;a.value={};a.value.node=e.join("")||"div";a.value.extra=v;a.extra=extra||{};return a},
            peg$c91 = "[",
            peg$c92 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c93 = "]",
            peg$c94 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c95 = function(cond, extra) {cond.extra=extra||{};return cond},
            peg$c96 = ".",
            peg$c97 = { type: "literal", value: ".", description: "\".\"" },
            peg$c98 = function(val, extra) {return {"class":val.join(""),"extra":extra||{}}},
            peg$c99 = "#",
            peg$c100 = { type: "literal", value: "#", description: "\"#\"" },
            peg$c101 = function(val, extra) {return {"id":val.join(""),"extra":extra||{}}},
            peg$c102 = " ",
            peg$c103 = { type: "literal", value: " ", description: "\" \"" },
            peg$c104 = ",",
            peg$c105 = { type: "literal", value: ",", description: "\",\"" },
            peg$c106 = function(e, extra) {return {"node":e.join(""),"extra":extra||{}}},
            peg$c107 = function(e, extra) {return {"contains":e.join(""),"extra":extra||{}}},
            peg$c108 = ">",
            peg$c109 = { type: "literal", value: ">", description: "\">\"" },
            peg$c110 = function(e, extra) {return {"child":e.join(""),"extra":extra||{}}},
            peg$c111 = "+",
            peg$c112 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c113 = function(e, extra) {return {"immediate_child":e.join(""),"extra":extra||{}}},
            peg$c114 = "~",
            peg$c115 = { type: "literal", value: "~", description: "\"~\"" },
            peg$c116 = function(e, extra) {return {"after":e.join(""),"extra":extra||{}}},
            peg$c117 = function(attr) {return {"attr":attr.join("")}},
            peg$c118 = "=",
            peg$c119 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c120 = /^[^\]]/,
            peg$c121 = { type: "class", value: "[^\\]]", description: "[^\\]]" },
            peg$c122 = function(attr, val) {return {"attr_is":attr.join(""),"value":val.join("")}},
            peg$c123 = "~=",
            peg$c124 = { type: "literal", value: "~=", description: "\"~=\"" },
            peg$c125 = function(attr, val) {return {"attr_has_word":attr.join(""),"value":val.join("")}},
            peg$c126 = "|=",
            peg$c127 = { type: "literal", value: "|=", description: "\"|=\"" },
            peg$c128 = function(attr, val) {return {"attr_starts_hyphen":attr.join(""),"value":val.join("")}},
            peg$c129 = "^=",
            peg$c130 = { type: "literal", value: "^=", description: "\"^=\"" },
            peg$c131 = function(attr, val) {return {"attr_starts":attr.join(""),"value":val.join("")}},
            peg$c132 = "$=",
            peg$c133 = { type: "literal", value: "$=", description: "\"$=\"" },
            peg$c134 = function(attr, val) {return {"attr_ends":attr.join(""),"value":val.join("")}},
            peg$c135 = "*=",
            peg$c136 = { type: "literal", value: "*=", description: "\"*=\"" },
            peg$c137 = function(attr, val) {return {"attr_has":attr.join(""),"value":val.join("")}},

            peg$currPos          = 0,
            peg$savedPos         = 0,
            peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }

          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
          return input.substring(peg$savedPos, peg$currPos);
        }

        function location() {
          return peg$computeLocation(peg$savedPos, peg$currPos);
        }

        function expected(description) {
          throw peg$buildException(
            null,
            [{ type: "other", description: description }],
            input.substring(peg$savedPos, peg$currPos),
            peg$computeLocation(peg$savedPos, peg$currPos)
          );
        }

        function error(message) {
          throw peg$buildException(
            message,
            null,
            input.substring(peg$savedPos, peg$currPos),
            peg$computeLocation(peg$savedPos, peg$currPos)
          );
        }

        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos],
              p, ch;

          if (details) {
            return details;
          } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
              p--;
            }

            details = peg$posDetailsCache[p];
            details = {
              line:   details.line,
              column: details.column,
              seenCR: details.seenCR
            };

            while (p < pos) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) { details.line++; }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }

              p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
          }
        }

        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos),
              endPosDetails   = peg$computePosDetails(endPos);

          return {
            start: {
              offset: startPos,
              line:   startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line:   endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }

        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) { return; }

          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }

          peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, found, location) {
          function cleanupExpected(expected) {
            var i = 1;

            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });

            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }

          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

              return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }

            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;

            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expected.length > 1
              ? expectedDescs.slice(0, -1).join(", ")
                  + " or "
                  + expectedDescs[expected.length - 1]
              : expectedDescs[0];

            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }

          if (expected !== null) {
            cleanupExpected(expected);
          }

          return new peg$SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            location
          );
        }

        function peg$parsestart() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = peg$parseelement();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseextra();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c0(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsevalid() {
          var s0;

          if (peg$c1.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c2); }
          }

          return s0;
        }

        function peg$parseelement() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s2 = peg$c3;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s2 = peg$c3;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseextra() {
          var s0;

          s0 = peg$parseattributes();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepseudo();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepseudoSpecial();
              if (s0 === peg$FAILED) {
                s0 = peg$parsepseudoSpecialO();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemulti();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsechild();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseichild();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseafter();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsecontains();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsebrackets();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          return s0;
        }

        function peg$parseattributes() {
          var s0;

          s0 = peg$parseclass();
          if (s0 === peg$FAILED) {
            s0 = peg$parseid();
          }

          return s0;
        }

        function peg$parsepseudo() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c6;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s2 = peg$c6;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c8) {
                s3 = peg$c8;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c10) {
                  s3 = peg$c10;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c12) {
                    s3 = peg$c12;
                    peg$currPos += 6;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c14) {
                      s3 = peg$c14;
                      peg$currPos += 7;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c15); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c16) {
                        s3 = peg$c16;
                        peg$currPos += 8;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c18) {
                          s3 = peg$c18;
                          peg$currPos += 5;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c19); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c20) {
                            s3 = peg$c20;
                            peg$currPos += 7;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c21); }
                          }
                          if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 11) === peg$c22) {
                              s3 = peg$c22;
                              peg$currPos += 11;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c23); }
                            }
                            if (s3 === peg$FAILED) {
                              if (input.substr(peg$currPos, 12) === peg$c24) {
                                s3 = peg$c24;
                                peg$currPos += 12;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c25); }
                              }
                              if (s3 === peg$FAILED) {
                                if (input.substr(peg$currPos, 10) === peg$c26) {
                                  s3 = peg$c26;
                                  peg$currPos += 10;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c27); }
                                }
                                if (s3 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 13) === peg$c28) {
                                    s3 = peg$c28;
                                    peg$currPos += 13;
                                  } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                                  }
                                  if (s3 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c30) {
                                      s3 = peg$c30;
                                      peg$currPos += 5;
                                    } else {
                                      s3 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                    }
                                    if (s3 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c32) {
                                        s3 = peg$c32;
                                        peg$currPos += 5;
                                      } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c33); }
                                      }
                                      if (s3 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c34) {
                                          s3 = peg$c34;
                                          peg$currPos += 8;
                                        } else {
                                          s3 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                        }
                                        if (s3 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 7) === peg$c36) {
                                            s3 = peg$c36;
                                            peg$currPos += 7;
                                          } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                          }
                                          if (s3 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 10) === peg$c38) {
                                              s3 = peg$c38;
                                              peg$currPos += 10;
                                            } else {
                                              s3 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                            }
                                            if (s3 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 12) === peg$c40) {
                                                s3 = peg$c40;
                                                peg$currPos += 12;
                                              } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c41); }
                                              }
                                              if (s3 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 4) === peg$c42) {
                                                  s3 = peg$c42;
                                                  peg$currPos += 4;
                                                } else {
                                                  s3 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                                }
                                                if (s3 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 12) === peg$c44) {
                                                    s3 = peg$c44;
                                                    peg$currPos += 12;
                                                  } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                  }
                                                  if (s3 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 10) === peg$c46) {
                                                      s3 = peg$c46;
                                                      peg$currPos += 10;
                                                    } else {
                                                      s3 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c47); }
                                                    }
                                                    if (s3 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 8) === peg$c48) {
                                                        s3 = peg$c48;
                                                        peg$currPos += 8;
                                                      } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                                      }
                                                      if (s3 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 12) === peg$c50) {
                                                          s3 = peg$c50;
                                                          peg$currPos += 12;
                                                        } else {
                                                          s3 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c51); }
                                                        }
                                                        if (s3 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 9) === peg$c52) {
                                                            s3 = peg$c52;
                                                            peg$currPos += 9;
                                                          } else {
                                                            s3 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c53); }
                                                          }
                                                          if (s3 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 10) === peg$c54) {
                                                              s3 = peg$c54;
                                                              peg$currPos += 10;
                                                            } else {
                                                              s3 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                                            }
                                                            if (s3 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 8) === peg$c56) {
                                                                s3 = peg$c56;
                                                                peg$currPos += 8;
                                                              } else {
                                                                s3 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                                              }
                                                              if (s3 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c58) {
                                                                  s3 = peg$c58;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s3 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                                                }
                                                                if (s3 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 9) === peg$c60) {
                                                                    s3 = peg$c60;
                                                                    peg$currPos += 9;
                                                                  } else {
                                                                    s3 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                                                  }
                                                                  if (s3 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 6) === peg$c62) {
                                                                      s3 = peg$c62;
                                                                      peg$currPos += 6;
                                                                    } else {
                                                                      s3 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                                                    }
                                                                    if (s3 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5) === peg$c64) {
                                                                        s3 = peg$c64;
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s3 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c65); }
                                                                      }
                                                                      if (s3 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 7) === peg$c66) {
                                                                          s3 = peg$c66;
                                                                          peg$currPos += 7;
                                                                        } else {
                                                                          s3 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseextra();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c68(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsepseudoSpecial() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c6;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c69) {
              s2 = peg$c69;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c70); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c71) {
                s2 = peg$c71;
                peg$currPos += 9;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 14) === peg$c73) {
                  s2 = peg$c73;
                  peg$currPos += 14;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c74); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 16) === peg$c75) {
                    s2 = peg$c75;
                    peg$currPos += 16;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c76); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 11) === peg$c77) {
                      s2 = peg$c77;
                      peg$currPos += 11;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c78); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c79) {
                        s2 = peg$c79;
                        peg$currPos += 4;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c80); }
                      }
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c81;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parsevalid();
                if (s5 === peg$FAILED) {
                  if (peg$c83.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c84); }
                  }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsevalid();
                  if (s5 === peg$FAILED) {
                    if (peg$c83.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c84); }
                    }
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c85;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c86); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseextra();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c87(s2, s4, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsepseudoSpecialO() {
          var s0, s1, s2, s3, s4, s5, s6, s7;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c6;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c88) {
              s2 = peg$c88;
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c81;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseelement();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseextra();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c85;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c86); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseextra();
                      if (s7 === peg$FAILED) {
                        s7 = null;
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c90(s2, s4, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsebrackets() {
          var s0, s1, s2, s3, s4;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c91;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c92); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseequal();
            if (s2 === peg$FAILED) {
              s2 = peg$parsehasword();
              if (s2 === peg$FAILED) {
                s2 = peg$parsehas();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsestartsh();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsestarts();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseend();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseattr();
                      }
                    }
                  }
                }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c93;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseextra();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c95(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseclass() {
          var s0, s1, s2, s3;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s1 = peg$c96;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsevalid();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsevalid();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseextra();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c98(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseid() {
          var s0, s1, s2, s3;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c99;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c100); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsevalid();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsevalid();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseextra();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c101(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsemulti() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c102;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s2 = peg$c104;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c105); }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c102;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseelement();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseextra();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c106(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsecontains() {
          var s0, s1, s2, s3;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c102;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseelement();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseextra();
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c107(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsechild() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c102;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s2 = peg$c108;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c102;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseelement();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseextra();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c110(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseichild() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c102;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c111;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c112); }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c102;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseelement();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseextra();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c113(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseafter() {
          var s0, s1, s2, s3, s4, s5;

          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c102;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 126) {
              s2 = peg$c114;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c102;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseelement();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseextra();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c116(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseattr() {
          var s0, s1, s2;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c117(s1);
          }
          s0 = s1;

          return s0;
        }

        function peg$parseequal() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c102;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c118;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c119); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s4 = peg$c102;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c120.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c122(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsehasword() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c102;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c123) {
                s3 = peg$c123;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s4 = peg$c102;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c120.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c125(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsestartsh() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c102;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c126) {
                s3 = peg$c126;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s4 = peg$c102;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c120.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c128(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsestarts() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c102;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c129) {
                s3 = peg$c129;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s4 = peg$c102;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c120.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c131(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parseend() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c102;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c132) {
                s3 = peg$c132;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s4 = peg$c102;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c120.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c134(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        function peg$parsehas() {
          var s0, s1, s2, s3, s4, s5, s6;

          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsevalid();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsevalid();
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s2 = peg$c102;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c135) {
                s3 = peg$c135;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c136); }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s4 = peg$c102;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  if (peg$c120.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c120.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c137(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }

          return s0;
        }

        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
          }

          throw peg$buildException(
            null,
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
              ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
              : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
          );
        }
      }

      return {
        SyntaxError: peg$SyntaxError,
        parse:       peg$parse
      };
    })();

    function build(elements, data, loadOrder, load, special, def, done) {
        var element = elements[elements.length - 1],
            child,
            prev,
            i;
        if (element.children.length > 0) {
            element = element.children[element.children.length - 1];
        }
        if (!data.extra || Object.getOwnPropertyNames(data.extra).length === 0) {
            return [elements, loadOrder, special, done];
        } else {
            if (data.extra['class']) {
                element.setAttribute("class", ((element.getAttribute("class") || "") + " " + data.extra['class']).replace(/^\s/, ""));
            } else if (data.extra.id) {
                element.setAttribute("id", ((element.getAttribute("id") || "") + " " + data.extra.id).replace(/^\s/, ""));
            } else if (data.extra.node) {
                elements.push(document.createElement(data.extra.node));
                load += 1;
                loadOrder.push(load);
                special.push(def);
            } else if (data.extra.contains) {
                if (!element.getAttribute("data-placebo-prevent-children")) {
                    child = document.createElement(data.extra.contains);
                    element.appendChild(child);
                }
            } else if (data.extra.child) {
                if (!element.getAttribute("data-placebo-prevent-children")) {
                    child = document.createElement(data.extra.child);
                    element.appendChild(child);
                }
            } else if (data.extra.immediate_child) {
                elements.push(document.createElement(data.extra.immediate_child));
                load += 1;
                loadOrder.push(load);
                special.push(def);
            } else if (data.extra.after) {
                elements.push(document.createElement(data.extra.after));
                load += 1;
                loadOrder.splice(0, 0, load);
                special.push(def);
            } else if (data.extra.attr) {
                element.setAttribute(data.extra.attr, "");
            } else if (data.extra.attr_is) {
                element.setAttribute(data.extra.attr_is, data.extra.value);
            } else if (data.extra.attr_has_word) {
                element.setAttribute(data.extra.attr_has_word, data.extra.value);
            } else if (data.extra.attr_starts_hyphen) {
                element.setAttribute(data.extra.attr_starts_hyphen, data.extra.value);
            } else if (data.extra.attr_starts) {
                element.setAttribute(data.extra.attr_starts, data.extra.value);
            } else if (data.extra.attr_ends) {
                element.setAttribute(data.extra.attr_ends, data.extra.value);
            } else if (data.extra.attr_has) {
                element.setAttribute(data.extra.attr_has, data.extra.value);
            } else if (data.extra.pseudo) {
                if (data.extra.pseudo === "checked") {
                    element.checked = true;
                } else if (data.extra.pseudo === "disabled") {
                    element.disabled = true;
                } else if (data.extra.pseudo === "empty") {
                    element.innerHTML = "";
                    element.setAttribute("data-placebo-prevent-children", "true");
                } else if (data.extra.pseudo === "enabled") {
                    element.disabled = false;
                } else if (data.extra.pseudo === "first-child") {
                    special[special.length - 1] = function (e, p) {
                        p.insertBefore(e, p.childNodes[0]);
                    };
                } else if (data.extra.pseudo === "first-of-type") {
                    special[special.length - 1] = function (e, p) {
                        var found = false,
                            i;
                        for (i = 0; i < p.children.length; i += 1) {
                            if (p.children[i].nodeName === element.nodeName && !found) {
                                found = true;
                                p.insertBefore(e, p.children[i]);
                            }
                        }
                        if (!found) {
                            p.appendChild(e);
                        }
                    };
                } else if (data.extra.pseudo === "focus") {
                    done.push(function () {
                        element.focus();
                    });
                } else if (data.extra.pseudo === "in-range") {
                    if (element.getAttribute("min") && element.getAttribute("max")) {
                        element.setAttribute("value", Math.floor((Math.random() * Number(element.getAttribute("max"))) + Number(element.getAttribute("min"))));
                    } else if (element.getAttribute("max")) {
                        element.setAttribute("value", Math.floor((Math.random() * Number(element.getAttribute("max")))));
                    } else if (element.getAttribute("min")) {
                        element.setAttribute("value", Math.floor((Math.random() * (Number(element.getAttribute("min")) * 2)) + Number(element.getAttribute("min"))));
                    }
                } else if (data.extra.pseudo === "lang") {
                    element.setAttribute("lang", data.extra.value);
                } else if (data.extra.pseudo === "last-of-type") {
                    special[special.length - 1] = function (e, p) {
                        var found = false,
                            pre,
                            i;
                        for (i = 0; i < p.children.length; i += 1) {
                            if (p.children[i].nodeName === element.nodeName) {
                                pre = p.children[i];
                                found = true;
                            }
                        }
                        if (found && pre.nextElementSibling) {
                            p.insertBefore(e, pre.nextElementSibling);
                        } else {
                            p.appendChild(e);
                        }
                    };
                } else if (data.extra.pseudo === "nth-child") {
                    special[special.length - 1] = function (e, p) {
                        if (p.children[Number(data.extra.value) - 1]) {
                            p.insertBefore(e, p.children[Number(data.extra.value) - 1]);
                        } else {
                            p.appendChild(e);
                        }
                    };
                } else if (data.extra.pseudo === "nth-last-of-type") {
                    special[special.length - 1] = function (e, p) {
                        var matches = [],
                            found = false,
                            i;
                        for (i = 0; i < p.children.length; i += 1) {
                            if (p.children[i].nodeName === element.nodeName) {
                                matches.push(p.children[i]);
                            }
                        }
                        if (matches.length >= Number(data.extra.value)) {
                            p.insertBefore(e, matches[(matches.length - Number(data.extra.value)) + 1]);
                        } else {
                            p.appendChild(e);
                        }
                    };
                } else if (data.extra.pseudo === "nth-of-type") {
                    special[special.length - 1] = function (e, p) {
                        var matches = [],
                            found = false,
                            i;
                        for (i = 0; i < p.children.length; i += 1) {
                            if (p.children[i].nodeName === element.nodeName) {
                                matches.push(p.children[i]);
                            }
                        }
                        if (matches.length >= Number(data.extra.value)) {
                            p.insertBefore(e, matches[Number(data.extra.value) - 1]);
                        } else {
                            p.appendChild(e);
                        }
                    };
                } else if (data.extra.pseudo === "only-of-type") {
                    special[special.length - 1] = function (e, p) {
                        var i;
                        for (i = 0; i < p.children.length; i += 1) {
                            if (p.children[i].nodeName === element.nodeName) {
                                while (p.children[i].hasChildNodes()) {
                                    p.children[i].removeChild(p.children[i].firstChild);
                                }
                                p.removeChild(p.children[i]);
                            }
                        }
                        p.appendChild(e);
                    };
                } else if (data.extra.pseudo === "only-child") {
                    special[special.length - 1] = function (e, p) {
                        while (p.hasChildNodes()) {
                            p.removeChild(p.firstChild);
                        }
                        p.appendChild(e);
                    };
                } else if (data.extra.pseudo === "optional") {
                    element.required = false;
                } else if (data.extra.pseudo === "out-of-range") {
                    if (element.getAttribute("max")) {
                        element.setAttribute("value", Math.floor((Math.random() * (Number(element.getAttribute("max")) * 2)) + Number(element.getAttribute("max"))));
                    }
                } else if (data.extra.pseudo === "read-only") {
                    element.readyOnly = true;
                    element.setAttribute("readonly", "");
                    element.contentEditable = false;
                } else if (data.extra.pseudo === "read-write") {
                    element.readOnly = false;
                    element.contentEditable = true;
                } else if (data.extra.pseudo === "required") {
                    element.required = true;
                } else if (data.extra.pseudo === "target") {
                    if (element.getAttribute("id")) {
                        history.pushState({}, document.title, "#" + element.getAttribute("id"));
                    }
                } else if (data.extra.pseudo === "text") {
                    element.innerHTML = data.extra.value;
                }
            }
            return build(elements, data.extra, loadOrder, load, special, def, done);
        }
    }
    function placebo(selector) {
        var data = parser.parse(selector),
            elements = [],
            def = function (e, p) {
                p.appendChild(e);
            },
            loadOrder,
            targets,
            special,
            built,
            done,
            i;
        if (data.node === "*") {
            targets = document.querySelectorAll("*");
            for (i = 0; i < targets.length; i += 1) {
                elements.push(targets[i].cloneNode(true));
            }
            loadOrder = [0];
            special = [def];
            done = [];
        } else {
            built = build([document.createElement(data.node)], data, [0], 1, [def], def, []);
            elements = built[0];
            loadOrder = built[1];
            special = built[2];
            done = built[3];
        }
        return {
            "done": done,
            "elements": elements,
            "export": function (map) {
                var i;
                for (i = 0; i < this.elements.length; i += 1) {
                    map(this.elements[i]);
                }
                return this;
            },
            "html": function () {
                var wrap = document.createElement('div'),
                    i;
                for (i = 0; i < this.elements.length; i += 1) {
                    wrap.appendChild(this.elements[i]);
                }
                return wrap.innerHTML;
            },
            "loadOrder": loadOrder,
            "on": function (event, callback) {
                var i;
                for (i = 0; i < this.elements.length; i += 1) {
                    this.elements[i].addEventListener(event, callback);
                }
                return this;
            },
            "place": function (parent) {
                var load = [],
                    i,
                    b,
                    c,
                    d;
                if (!parent) {
                    if (document.body) {
                        parent = [document.body];
                    } else {
                        throw "Placebo requires a document with a body!";
                    }
                }
                if (typeof parent === "string") {
                    parent = document.querySelectorAll(parent);
                } else if (parent.placebo) {
                    parent = parent.elements;
                } else if (!parent.length) {
                    parent = [parent];
                }
                function min(item, array) {
                    var a;
                    for (a = 0; a < array.length; a += 1) {
                        if (item > array[a]) {
                            return false;
                        }
                    }
                    return true;
                }
                function sort(loadOrder, elements, special, stack) {
                    var i;
                    if (!loadOrder || loadOrder.length < 1) {
                        return stack;
                    } else {
                        for (i = 0; i < loadOrder.length; i += 1) {
                            if (min(loadOrder[i], loadOrder)) {
                                stack[0].push(elements[i]);
                                stack[1].push(special[i]);
                                loadOrder.splice(i, 1);
                                elements.splice(i, 1);
                                special.splice(i, 1);
                                return sort(loadOrder, elements, special, stack);
                            }
                        }
                    }
                }
                load = sort(this.loadOrder, this.elements, this.special, [[], []]);
                for (b = 0; b < load[0].length; b += 1) {
                    for (d = 0; d < parent.length; d += 1) {
                        load[1][b](load[0][b], parent[d]);
                    }
                }
                for (c = 0; c < this.done.length; c += 1) {
                    this.done[c](parent);
                }
                return this;
            },
            "placebo": true,
            "special": special,
            "style": function (styles) {
                var keys = Object.getOwnPropertyNames(styles),
                    i,
                    a;
                for (i = 0; i < keys.length; i += 1) {
                    for (a = 0; a < this.elements.length; a += 1) {
                        this.elements[a].style[keys[i]] = styles[keys[i]];
                    }
                }
                return this;
            },
            "text": function (text) {
                var i;
                for (i = 0; i < this.elements.length; i += 1) {
                    this.elements[i].innerHTML = text;
                }
                return this;
            }
        };
    }
    if (typeof define === "function" && define.amd) {
        define(function() {
            return placebo;
        });
    } else {
        context.placebo = placebo;
    }
}(this));
